
#user nobody nogroup; #表示以默认用户（root）运行。若取消注释，注意修改为相应权限的用户与组。
worker_processes auto;

error_log /var/log/nginx/error.log; #错误日志的文件地址

pid /run/nginx.pid;

events {
    worker_connections 1024;
}

stream {
    map $ssl_preread_server_name $backend_name {
        zv.xx.yy  vless; #zv.xx.yy为对应VLESS+Vision+REALITY的域名，修改为自己的。
        zt.xx.yy trojan; #zt.xx.yy为对应Trojan+TCP+TLS的域名，修改为自己的。
        zh.xx.yy  http2; #zh.xx.yy为对应HTTP/2 server的域名，修改为自己的。
    } #禁止以IP方式访问网站
    upstream vless {
        server unix:/dev/shm/vless.sock; #转给VLESS+Vision+REALITY监听进程
    }
    upstream trojan {
        server unix:/dev/shm/trojan.sock; #转给Trojan+TCP+TLS监听进程
    }
    upstream http2 {
        server unix:/dev/shm/http2.sock; #转给HTTP/2 server监听进程
    }
    server {
        listen 443;
        listen [::]:443; #无IPv6，此项可删除。
        ssl_preread on;
        proxy_pass $backend_name;
        proxy_protocol on; #启用PROXY protocol发送（全局模式）
    }
}

http {
    include mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main; #访问日志的文件地址

    sendfile on;

    keepalive_timeout 65;

    server {
        listen 80;
        listen [::]:80; #无IPv6，此项可删除。
        return 301 https://$host$request_uri; #HTTP自动跳转HTTPS，让网站看起来更真实。
    }

    server {
        listen unix:/dev/shm/h2c.sock http2 proxy_protocol; #使用H2C server监听进程，且开启PROXY protocol接收。（版本小于v1.25.1配置，否则删除。）
        #listen unix:/dev/shm/h1h2c.sock proxy_protocol; #使用H2C server及HTTP/1.1 server监听进程，且开启PROXY protocol接收。（版本不小于v1.25.1配置，去掉注释后启用。）
        #http2 on; #版本不小于v1.25.1配置，去掉注释后启用。
        set_real_ip_from unix:;
        real_ip_header proxy_protocol;

        location /SALdGZ9k { #与Shadowsocks+gRPC应用中serviceName对应
            if ($request_method != "POST") {
                return 404;
            } #POST协商失败时返回404
            client_body_buffer_size 1m;
            client_body_timeout 1h;
            client_max_body_size 0;
            grpc_pass grpc://127.0.0.1:2011; #转发给本机Shadowsocks+gRPC监听端口
            grpc_read_timeout 1h;
            grpc_send_timeout 1h;
            grpc_set_header Host $host;
            grpc_set_header X-Real-IP $remote_addr;
        }

        location / {
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; #启用HSTS
            root /var/www/html; #修改为自己存放的WEB文件路径
            index index.html index.htm;
        }
    }

    server {
        listen unix:/dev/shm/h1.sock proxy_protocol; #使用HTTP/1.1 server监听进程，且开启PROXY protocol接收。
        set_real_ip_from unix:;
        real_ip_header proxy_protocol;

        location / {
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; #启用HSTS
            root /var/www/html; #修改为自己存放的WEB文件路径
            index index.html index.htm;
        }
    } #版本小于v1.25.1配置，否则删除。

    server {
        listen unix:/dev/shm/http2.sock ssl http2 proxy_protocol; #使用HTTP/2 server监听进程，且开启PROXY protocol接收。（版本小于v1.25.1配置，否则删除。）
        #listen unix:/dev/shm/http2.sock ssl proxy_protocol; #使用HTTP/2 server监听进程，且开启PROXY protocol接收。（版本不小于v1.25.1配置，去掉注释后启用。）
        #http2 on; #版本不小于v1.25.1配置，去掉注释后启用。
        set_real_ip_from unix:;
        real_ip_header X-Forwarded-For;

        ssl_certificate /home/tls/wildcard_.xx.yy/wildcard_.xx.yy.crt; #换成自己的通配符证书或SAN证书，绝对路径。
        ssl_certificate_key /home/tls/wildcard_.xx.yy/wildcard_.xx.yy.key; #换成自己的通配符密钥或SAN密钥，绝对路径。

        ssl_protocols TLSv1.2 TLSv1.3; #若使用OpenSSL库，TLSv1.3需要OpenSSL库的版本不小于1.1.1编译才支持。
        ssl_prefer_server_ciphers on; #优先使用服务端的密码套件（对如下TLSv1.2协议的密码套件有效）
        ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256; #若证书为RSA证书，所有ECDSA改为RSA。
        ssl_ecdh_curve secp521r1:secp384r1:secp256r1:x25519; #若使用OpenSSL库，此项的配置参数需要OpenSSL库的版本不小于3.0.0编译才支持。

        location = /HALdGZ9k { #与VMess+WebSocket应用中path对应
            if ($http_upgrade != "websocket") {
                return 404;
            } #WebSocket协商失败时返回404
            proxy_redirect off;
            proxy_pass http://unix:/dev/shm/vmessws.sock; #转发给本机VMess+WebSocket监听进程
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /SALdGZ9k { #与Shadowsocks+gRPC应用中serviceName对应
            if ($request_method != "POST") {
                return 404;
            } #POST协商失败时返回404
            client_body_buffer_size 1m;
            client_body_timeout 1h;
            client_max_body_size 0;
            grpc_pass grpc://127.0.0.1:2011; #转发给本机Shadowsocks+gRPC监听端口
            grpc_read_timeout 1h;
            grpc_send_timeout 1h;
            grpc_set_header Host $host;
            grpc_set_header X-Real-IP $remote_addr;
        }

        location / {
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; #启用HSTS
            root /var/www/html; #修改为自己存放的WEB文件路径
            index index.html index.htm;
        }
    }
}
#备注：
#1、本示例使用REALITY Vision配置（zv.xx.yy）、非AES算法的密码套件配置（zt.xx.yy）、套CDN（zh.xx.yy）来避免被封。
#2、本示例使用不同域名来实现介绍中各应用，其办法如下：
#1）、VLESS+Vision+REALITY仅使用zv.xx.yy域名。
#2）、Trojan+TCP+TLS仅使用zt.xx.yy域名。
#3）、VMess+WebSocket+TLS仅使用zh.xx.yy域名。
#4）、Shadowsocks+gRPC+TLS可随意使用zt.xx.yy域名与zh.xx.yy域名。
